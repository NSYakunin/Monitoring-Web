@page
@model MyRequestsModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


@using Monitoring.UI.Pages

@{
    ViewData["Title"] = "Мои входящие заявки";
}

<!-- Контейнер на всю ширину (fluid) -->
<div class="container-fluid mt-3">

    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4 class="mb-0">Мои входящие заявк</h4>

        <!-- Кнопка "Назад на главную" -->
        <a class="btn btn-secondary" asp-page="/Index">
            Назад на главную
        </a>
    </div>

    <hr />

    @if (!Model.HasCloseWorkAccess)
    {
        <div class="alert alert-danger">
            У вас нет права на закрытие работ. Страница недоступна.
        </div>
    }
    else
    {
        @if (Model.MyRequests != null && Model.MyRequests.Count > 0)
        {
            <!-- 
                Обёртка с overflow-y: auto и max-height: 75vh, 
                чтобы при большом количестве заявок появился вертикальный скролл
                и шапка (thead) оставалась липкой (sticky).
            -->
            <div class="table-responsive" style="overflow-y: auto; max-height: 75vh;">
                <table class="table table-bordered table-hover w-100" id="myRequestsTable">
                    <thead class="sticky-header">
                        <tr>
                            <th>Документ</th>
                            <th>Работа</th>
                            <th>Исполнитель</th>
                            <th>Контроль</th>
                            <th>Принимающий</th>
                            <th>План</th>
                            <th>Корр1</th>
                            <th>Корр2</th>
                            <th>Корр3</th>
                            <th>Заявка</th>
                            <th>На дату</th>
                            <th>Отправитель</th>
                            <th>Заметка</th>
                            <th>Действие</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var req in Model.MyRequests)
                        {
                            /*
                               Определяем класс строки, чтобы подсветка была мягкой и прозрачной:
                               - Если RequestType == "факт" => используем table-info (голубой, но переопределим в CSS -> прозрачность)
                               - Иначе (корр1, корр2, корр3, и т.д.) => table-warning (желтый, но переопределим в CSS -> прозрачность)
                            */
                            string rowClass = (req.RequestType == "факт") ? "table-info" : "table-warning";

                            <tr class="@rowClass">
                                <td>@req.DocumentName</td>
                                <td>@req.WorkName</td>
                                <td>@req.Executor</td>
                                <td>@req.Controller</td>
                                <td>@req.Receiver</td>
                                <td>@(req.PlanDate?.ToString("yyyy-MM-dd") ?? "")</td>
                                <td>@(req.Korrect1?.ToString("yyyy-MM-dd") ?? "")</td>
                                <td>@(req.Korrect2?.ToString("yyyy-MM-dd") ?? "")</td>
                                <td>@(req.Korrect3?.ToString("yyyy-MM-dd") ?? "")</td>
                                <td>@req.RequestType</td>
                                <td>@(req.ProposedDate?.ToString("yyyy-MM-dd") ?? "")</td>
                                <td>@req.Sender</td>
                                <td>@req.Note</td>
                                <td>
                                    <!-- Центрируем кнопки верт. и гориз. 
                                         (Bootstrap: text-center + d-flex justify-content-center align-items-center)
                                    -->
                                    <div class="d-flex flex-column gap-2 justify-content-center align-items-center">
                                        <button class="btn btn-approve"
                                            onclick="setRequestStatus(@req.Id, '@req.WorkDocumentNumber', 'Accepted')">
                                            Принять
                                        </button>
                                        <button class="btn btn-decline"
                                            onclick="setRequestStatus(@req.Id, '@req.WorkDocumentNumber', 'Declined')">
                                            Отклонить
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="alert alert-info">
                Нет входящих заявок.
            </div>
        }
    }
</div>

@section Scripts {
    <style>
        /* Липкий заголовок (sticky header), центрируем текст */
        .sticky-header th {
            position: sticky;
            top: 0;
            z-index: 10;
            background: #2c3e50;
            color: #fff;
            text-align: center; /* Заголовки столбцов по центру */
        }

        .sticky-header th {
            padding: 8px;
            border-bottom: 2px solid #1a252f;
            white-space: nowrap;
        }

        .sticky-header th::after {
            content: '';
            position: absolute;
            right: 0;
            top: 50%;
            transform: translateY(-50%);
            height: 60%;
            width: 1px;
            background: rgba(255,255,255,0.1);
        }

        .sticky-header th:last-child::after {
            display: none;
        }

        /* 
           Разрешаем перенос строк везде, кроме столбцов (План, Корр1, Корр2, Корр3).
           Это 6,7,8,9-й столбцы:
        */
        #myRequestsTable td {
            white-space: normal; /* разрешаем перенос строк */
            vertical-align: middle; /* чтобы содержимое было посередине по вертикали */
        }

        #myRequestsTable td:nth-child(6),
        #myRequestsTable td:nth-child(7),
        #myRequestsTable td:nth-child(8),
        #myRequestsTable td:nth-child(9),
        #myRequestsTable td:nth-child(11) {
            white-space: nowrap; /* даты не переносятся */
        }

        /* Более мягкая прозрачность для table-info (обычно голубой) */
        .table-info {
            background-color: rgba(23, 162, 184, 0.15) !important; /* 0.15 - прозрачность */
        }

        /* Более мягкая прозрачность для table-warning (обычно желтый) */
        .table-warning {
            background-color: rgba(255, 193, 7, 0.15) !important; /* 0.15 - прозрачность */
        }

        /* Кнопки "Принять" и "Отклонить" - оформляем более мягко,
           но в фирменных цветах. Можно использовать Bootstrap "outline", 
           но сделаем свой стиль для большей индивидуальности.
        */
        .btn-approve {
            background: linear-gradient(145deg, #28a745, #218838);
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 5px;
            box-shadow: 0 3px 6px rgba(0,0,0,0.15);
            transition: all 0.3s ease;
        }

            .btn-approve:hover {
                background: linear-gradient(145deg, #218838, #28a745);
                box-shadow: 0 5px 10px rgba(0,0,0,0.2);
                transform: translateY(-1px);
            }

            .btn-approve:active {
                transform: translateY(1px);
                box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            }

        .btn-decline {
            background: linear-gradient(145deg, #dc3545, #c82333);
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 5px;
            box-shadow: 0 3px 6px rgba(0,0,0,0.15);
            transition: all 0.3s ease;
        }

            .btn-decline:hover {
                background: linear-gradient(145deg, #c82333, #dc3545);
                box-shadow: 0 5px 10px rgba(0,0,0,0.2);
                transform: translateY(-1px);
            }

            .btn-decline:active {
                transform: translateY(1px);
                box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            }
    </style>

    <script>
        // AJAX-метод для обновления статуса заявки
        function setRequestStatus(requestId, docNumber, newStatus) {
            let bodyData = {
                RequestId: requestId,
                DocumentNumber: docNumber,
                NewStatus: newStatus
            };
            fetch('@Url.Page("MyRequests", "SetRequestStatus")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(bodyData)
            })
            .then(r => r.json())
            .then(res => {
                if (res.success) {
                    alert("Статус обновлён: " + newStatus);
                    location.reload(); // Перезагружаем страницу, чтобы отобразить изменения
                } else {
                    alert("Ошибка: " + res.message);
                }
            })
            .catch(e => console.error(e));
        }
    </script>
}