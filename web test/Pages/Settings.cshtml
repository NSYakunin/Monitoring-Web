@page
@model Monitoring.UI.Pages.SettingsModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "Настройки пользователей";
}

<!--
    Контейнер, где располагается весь контент.
    Увеличиваем max-width, чтобы разместить 2-3 колонки удобнее.
-->
<div class="container mt-4" style="max-width: 1400px;">
    <h2 class="mb-4 text-center">Управление настройками и ролями пользователей</h2>

    <!-- Кнопка "Зарегистрировать пользователя" -->
    <div class="text-end mb-4">
        <button type="button" class="btn btn-primary shadow-sm" data-bs-toggle="modal" data-bs-target="#registerUserModal">
            Зарегистрировать пользователя
        </button>
    </div>

    <div class="row g-4">
        <!-- Левая колонка: Выбор пользователя + Подразделения -->
        <div class="col-md-5">
            <!-- Карточка "Выберите пользователя" -->
            <div class="card custom-card mb-4">
                <div class="custom-card-header">
                    <h5 class="mb-0">Выберите пользователя</h5>
                </div>
                <div class="custom-card-body">
                    <!-- NEW: Галочка "Показать неактивных" -->
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox"
                               id="showInactiveCheckbox"
                               onclick="onShowInactiveChanged()"
                        @(Model.ShowInactive ? "checked" : null) />
                        <label class="form-check-label" for="showInactiveCheckbox">
                            Показать неактивных
                        </label>
                    </div>

                    <div class="row mb-3 align-items-center">
                        <div class="col-sm-4 text-end">
                            <label for="SelectedUser" class="col-form-label">Пользователь:</label>
                        </div>
                        <div class="col-sm-8">
                            <select id="SelectedUser" name="SelectedUser" class="form-select multi-col-select"
                                    onchange="onUserSelectionChanged(this.value)">
                                <option value="">-- Не выбран --</option>
                                @foreach (var usr in Model.AllUsers)
                                {
                                    <option value="@usr" selected="@(Model.SelectedUserName == usr ? "selected" : null)">
                                        @usr
                                    </option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Карточка "Выбор подразделений" -->
            <div class="card custom-card mb-4">
                <div class="custom-card-header">
                    <h5 class="mb-0">Выбор подразделений для просмотра</h5>
                </div>
                <div class="custom-card-body">
                    @if (!string.IsNullOrEmpty(Model.SelectedUserName))
                    {
                        <!-- Список чекбоксов в 3 столбца -->
                        <div id="subdivisionList" class="subdivisions-grid-3">
                            @foreach (var sub in Model.Subdivisions)
                            {
                                bool isChecked = Model.UserSelectedDivisionIds.Contains(sub.IdDivision);

                                // Проверяем, является ли этот sub.IdDivision родным отделом для выбранного пользователя.
                                // Model.HomeDivisionIdForSelectedUser содержит родной отдел (см. код бэкенда).
                                bool isHomeDivision = (sub.IdDivision == Model.HomeDivisionIdForSelectedUser);

                                <div class="form-check d-flex align-items-center">
                                    <input class="form-check-input" type="checkbox"
                                           id="sub_@sub.IdDivision"
                                           value="@sub.IdDivision"
                                    @(isChecked ? "checked" : null)
                                    @(isHomeDivision ? "disabled" : null) />
                                    <label class="form-check-label" for="sub_@sub.IdDivision">
                                        @sub.SmallNameDivision
                                        @if (isHomeDivision)
                                        {
                                            <span class="text-muted" style="font-size:0.85rem;">(родной отдел)</span>
                                        }
                                    </label>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">Сначала выберите пользователя</p>
                    }
                </div>
            </div>
        </div>

        <!-- Правая колонка: Настройки приватности + смена пароля + кнопка "Сохранить" -->
        <div class="col-md-7">
            <div class="card custom-card mb-4">
                <div class="custom-card-header">
                    <h5 class="mb-0">Настройки приватности</h5>
                </div>
                <div class="custom-card-body">
                    @if (!string.IsNullOrEmpty(Model.SelectedUserName))
                    {
                        <!-- Таблица с настройками -->
                        <table class="table table-bordered table-custom">
                            <thead>
                                <tr>
                                    <th>Параметр</th>
                                    <th class="text-center">Разрешено?</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Возможность закрывать работы</td>
                                    <td class="text-center">
                                        <input type="checkbox"
                                               id="canCloseWork"
                                        @(Model.CurrentPrivacySettings.CanCloseWork ? "checked" : "") />
                                    </td>
                                </tr>
                                <tr>
                                    <td>Возможность отправлять заявки на закрытие работы</td>
                                    <td class="text-center">
                                        <input type="checkbox"
                                               id="canSendCloseRequest"
                                        @(Model.CurrentPrivacySettings.CanSendCloseRequest ? "checked" : "") />
                                    </td>
                                </tr>
                                <tr>
                                    <td>Доступ к настройкам</td>
                                    <td class="text-center">
                                        <input type="checkbox"
                                               id="canAccessSettings"
                                        @(Model.CurrentPrivacySettings.CanAccessSettings ? "checked" : "") />
                                    </td>
                                </tr>

                                <!-- NEW: Признак "Пользователь активен?" -->
                                <tr>
                                    <td>Пользователь активен</td>
                                    <td class="text-center">
                                        <input type="checkbox"
                                               id="isUserActive"
                                        @(Model.IsUserValid ? "checked" : "") />
                                    </td>
                                </tr>

                            </tbody>
                        </table>

                        <!-- Поле для отображения текущего пароля -->
                        <div class="mb-3">
                            <label for="currentPasswordForSelectedUser" class="form-label">Текущий пароль:</label>
                            <input type="text"
                                   id="currentPasswordForSelectedUser"
                                   class="form-control"
                                   value="@Model.CurrentPasswordForSelectedUser"
                                   readonly />
                        </div>

                        <!-- Поле для изменения пароля (с глазиком для показа/скрытия) -->
                        <div class="mb-3">
                            <label for="newPasswordForSelectedUser" class="form-label">Новый пароль (если нужно сменить):</label>
                            <div class="input-group">
                                <input type="password" id="newPasswordForSelectedUser" class="form-control" />
                                <button class="btn btn-outline-secondary" type="button" onclick="toggleNewPasswordVisibility()">
                                    <i class="bi bi-eye-slash-fill" id="toggleNewPassIcon"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Кнопка сохранения всех настроек (приватность, подразделения, пароль) -->
                        <div class="text-end">
                            <button class="btn btn-success shadow-sm" onclick="prepareSaveAllSettings()">Сохранить</button>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">Выберите пользователя слева, чтобы отобразить его настройки</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно "Регистрация пользователя" -->
<div class="modal fade" id="registerUserModal" tabindex="-1" aria-labelledby="registerUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 id="registerUserModalLabel" class="modal-title">Регистрация пользователя</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
            </div>
            <div class="modal-body">
                <!-- ФИО -->
                <div class="mb-3">
                    <label for="newUserFio" class="form-label">ФИО:</label>
                    <input type="text" id="newUserFio" class="form-control" placeholder="Иванов Иван Иванович" />
                </div>

                <!-- Малое имя (smallName, логин) -->
                <div class="mb-3">
                    <label for="newUserSmallName" class="form-label">Короткая запись (login):</label>
                    <input type="text" id="newUserSmallName" class="form-control" placeholder="Иванов И.И." />
                </div>

                <!-- Выбор подразделения -->
                <div class="mb-3">
                    <label for="newUserDivision" class="form-label">Подразделение:</label>
                    <select id="newUserDivision" class="form-select">
                        <option value="">-- Не выбрано --</option>
                        @foreach (var d in Model.Subdivisions)
                        {
                            <option value="@d.IdDivision">@d.SmallNameDivision</option>
                        }
                    </select>
                </div>

                <!-- Пароль -->
                <div class="mb-3">
                    <label for="newUserPassword" class="form-label">Пароль:</label>
                    <input type="password" id="newUserPassword" class="form-control" placeholder="******" />
                </div>

                <!-- Права пользователя (чекбоксы) -->
                <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="newUserCanCloseWork" />
                    <label class="form-check-label" for="newUserCanCloseWork">
                        Может закрывать работы
                    </label>
                </div>
                <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="newUserCanSendCloseRequest" />
                    <label class="form-check-label" for="newUserCanSendCloseRequest">
                        Может отправлять заявки на закрытие
                    </label>
                </div>
                <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="newUserCanAccessSettings" />
                    <label class="form-check-label" for="newUserCanAccessSettings">
                        Имеет доступ к настройкам
                    </label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" onclick="registerNewUser()">Зарегистрировать</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно подтверждения сохранения настроек -->
<div class="modal fade" id="confirmSaveModal" tabindex="-1" aria-labelledby="confirmSaveModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-warning">
                <h5 id="confirmSaveModalLabel" class="modal-title">Подтверждение сохранения</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
            </div>
            <div class="modal-body">
                <p><strong>Вы действительно хотите сохранить изменения?</strong></p>
                <p>Пользователь: <span id="confirmUserName"></span></p>
                <p>Текущий пароль: <span id="confirmOldPass"></span></p>
                <p>Новый пароль: <span id="confirmNewPass"></span></p>
                <p>Может закрывать работы? <span id="confirmCanClose"></span></p>
                <p>Может отправлять заявки на закрытие работ? <span id="confirmCanSend"></span></p>
                <p>Доступ к настройкам <span id="confirmCanAccess"></span></p>

                <!-- NEW: выводим активен/неактивен -->
                <p>Пользователь активен? <span id="confirmIsActive"></span></p>

                <p>Подразделения (ID): <span id="confirmSubdivisions"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Нет</button>
                <button type="button" class="btn btn-success" onclick="saveAllSettings()">Да, сохранить</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // --- Переключение пользователя ---
        function onUserSelectionChanged(userName) {
            let showInactive = document.getElementById("showInactiveCheckbox").checked;
            if (userName) {
                window.location.href = '?SelectedUserName=' + encodeURIComponent(userName)
                    + '&ShowInactive=' + showInactive;
            } else {
                window.location.href = '?SelectedUserName=&ShowInactive=' + showInactive;
            }
        }

        // --- При щелчке на "Показать неактивных" ---
        function onShowInactiveChanged() {
            let chk = document.getElementById("showInactiveCheckbox");
            let checked = chk.checked;
            // При переключении сбрасываем выбранного пользователя,
            // ведь мы переходим в другой список (активных/неактивных).
            window.location.href = '?ShowInactive=' + checked;
        }

        // --- Показ/скрытие нового пароля ---
        function toggleNewPasswordVisibility() {
            let passInput = document.getElementById("newPasswordForSelectedUser");
            let icon = document.getElementById("toggleNewPassIcon");
            if (passInput.type === "password") {
                passInput.type = "text";
                icon.classList.remove("bi-eye-slash-fill");
                icon.classList.add("bi-eye-fill");
            } else {
                passInput.type = "password";
                icon.classList.remove("bi-eye-fill");
                icon.classList.add("bi-eye-slash-fill");
            }
        }

        // --- Подготовка данных для сохранения ---
        function prepareSaveAllSettings() {
            let userName = document.getElementById("SelectedUser").value;
            if (!userName) {
                alert("Сначала выберите пользователя");
                return;
            }

            let canCloseWork = document.getElementById("canCloseWork").checked;
            let canSendCloseRequest = document.getElementById("canSendCloseRequest").checked;
            let canAccessSettings = document.getElementById("canAccessSettings").checked;
            // NEW: активен/неактивен
            let isActive = document.getElementById("isUserActive").checked;

            let currentPass = document.getElementById("currentPasswordForSelectedUser").value.trim();
            let newPass = document.getElementById("newPasswordForSelectedUser").value.trim();

            let checks = document.querySelectorAll("#subdivisionList input[type=checkbox]");
            let selectedSubs = [];
            checks.forEach(ch => {
                if (ch.checked) {
                    selectedSubs.push(parseInt(ch.value));
                }
            });

            // Заполняем в модальное окно
            document.getElementById("confirmUserName").textContent = userName;
            document.getElementById("confirmOldPass").textContent = currentPass ? currentPass : "(пусто)";
            document.getElementById("confirmNewPass").textContent = newPass ? newPass : "(не меняем)";
            document.getElementById("confirmCanClose").textContent = canCloseWork ? "Да" : "Нет";
            document.getElementById("confirmCanSend").textContent = canSendCloseRequest ? "Да" : "Нет";
            document.getElementById("confirmCanAccess").textContent = canAccessSettings ? "Да" : "Нет";
            // NEW:
            document.getElementById("confirmIsActive").textContent = isActive ? "Да" : "Нет";

            document.getElementById("confirmSubdivisions").textContent = selectedSubs.join(", ");

            let modalEl = document.getElementById('confirmSaveModal');
            let modal = new bootstrap.Modal(modalEl);
            modal.show();
        }

        // --- Сохранение (Yes в модальном окне) ---
        function saveAllSettings() {
            let userName = document.getElementById("SelectedUser").value;
            let canCloseWork = document.getElementById("canCloseWork").checked;
            let canSendCloseRequest = document.getElementById("canSendCloseRequest").checked;
            let canAccessSettings = document.getElementById("canAccessSettings").checked;
            let isActive = document.getElementById("isUserActive").checked;

            let newPass = document.getElementById("newPasswordForSelectedUser").value.trim();

            let checks = document.querySelectorAll("#subdivisionList input[type=checkbox]");
            let selectedSubs = [];
            checks.forEach(ch => {
                if (ch.checked) {
                    selectedSubs.push(parseInt(ch.value));
                }
            });

            // 1. Сохраняем приватные настройки + isActive
            let privacyData = {
                userName: userName,
                canCloseWork: canCloseWork,
                canSendCloseRequest: canSendCloseRequest,
                canAccessSettings: canAccessSettings,
                isActive: isActive
            };

            fetch('?handler=SavePrivacySettings', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(privacyData)
            })
            .then(r => r.json())
            .then(res => {
                if (!res.success) {
                    throw new Error("Ошибка при сохранении приватных настроек: " + res.message);
                }
                // 2. Сохраняем подразделения
                let subData = {
                    userName: userName,
                    subdivisions: selectedSubs
                };
                return fetch('?handler=SaveSubdivisions', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(subData)
                });
            })
            .then(r => r.json())
            .then(res => {
                if (!res.success) {
                    throw new Error("Ошибка при сохранении подразделений: " + res.message);
                }
                // 3. Если есть новый пароль
                if (newPass) {
                    let passData = {
                        userName: userName,
                        newPassword: newPass
                    };
                    return fetch('?handler=ChangeUserPassword', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(passData)
                    })
                    .then(r2 => r2.json())
                    .then(res2 => {
                        if (!res2.success) {
                            throw new Error("Ошибка при смене пароля: " + res2.message);
                        }
                        return res2;
                    });
                } else {
                    // Если новый пароль пуст, пропускаем этот шаг
                    return { success: true };
                }
            })
            .then(_ => {
                // Если мы дошли сюда, значит все три операции прошли успешно
                alert("Настройки успешно сохранены!");
                // Перезагружаем страницу, чтобы увидеть обновлённые данные
                location.reload();
            })
            .catch(e => {
                // При любой ошибке
                alert(e.message);
                console.error(e);
            });
        }

        // --- Регистрация нового пользователя ---
        function registerNewUser() {
            let fio = document.getElementById("newUserFio").value.trim();
            let smallName = document.getElementById("newUserSmallName").value.trim();
            let divisionId = document.getElementById("newUserDivision").value;
            let password = document.getElementById("newUserPassword").value.trim();
            let canClose = document.getElementById("newUserCanCloseWork").checked;
            let canSend = document.getElementById("newUserCanSendCloseRequest").checked;
            let canSettings = document.getElementById("newUserCanAccessSettings").checked;

            if (!fio || !smallName || !password) {
                alert("Пожалуйста, заполните ФИО, login и пароль.");
                return;
            }

            let data = {
                fullName: fio,
                smallName: smallName,
                idDivision: divisionId ? parseInt(divisionId) : null,
                password: password,
                canCloseWork: canClose,
                canSendCloseRequest: canSend,
                canAccessSettings: canSettings
            };

            fetch('?handler=RegisterUser', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })
            .then(r => r.json())
            .then(res => {
                if (res.success) {
                    alert("Пользователь зарегистрирован!");
                    let modalEl = document.getElementById('registerUserModal');
                    let modal = bootstrap.Modal.getInstance(modalEl);
                    modal.hide();
                    location.reload();
                } else {
                    alert("Ошибка регистрации: " + res.message);
                }
            })
            .catch(e => console.error(e));
        }
    </script>

    <!--
        Стили, специфичные для страницы "Settings".
        Добавляем лёгкие тени и закругления для карточек и таблиц.
    -->
    <style>
        .custom-card {
            border: none;
            border-radius: 12px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.1);
            transition: transform 0.3s;
        }

            .custom-card:hover {
                transform: scale(1.005);
            }

        .custom-card-header {
            background-color: #495057;
            color: #fff;
            border-top-left-radius: 12px;
            border-top-right-radius: 12px;
            padding: 1rem;
        }

        .custom-card-body {
            padding: 1rem;
            background-color: #ffffff;
            border-bottom-left-radius: 12px;
            border-bottom-right-radius: 12px;
        }

        .table-custom {
            background-color: #fff;
            border-radius: 8px;
            overflow: hidden;
        }

            .table-custom thead {
                background: #e9ecef;
            }

        .multi-col-select {
            -webkit-column-count: 2;
            -moz-column-count: 2;
            column-count: 2;
            height: auto;
        }

            .multi-col-select option {
                -webkit-column-break-inside: avoid;
                -moz-column-break-inside: avoid;
                column-break-inside: avoid;
            }

        .subdivisions-grid-3 {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.5rem;
        }

        .form-check-input {
            transform: scale(1.1);
            margin-right: 8px;
        }

        .form-check-label {
            cursor: pointer;
        }
    </style>
}