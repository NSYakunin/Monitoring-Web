@page
@model Monitoring.UI.Pages.SettingsModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "Настройки пользователей";
}

<!-- Сделаем контейнер чуть шире, чтобы удобнее помещался двухколоночный список пользователей -->
<div class="container mt-4" style="max-width: 1400px;">
    <!-- Заголовок страницы -->
    <h2 class="mb-4 text-center">Управление настройками и ролями пользователей</h2>

    <!-- Кнопка "Зарегистрировать пользователя" -->
    <div class="text-end mb-4">
        <button type="button" class="btn btn-primary shadow-sm" data-bs-toggle="modal" data-bs-target="#registerUserModal">
            Зарегистрировать пользователя
        </button>
    </div>

    <div class="row g-4">
        <!-- Левая колонка: Выбор пользователя + Подразделения -->
        <div class="col-md-5">
            <!-- Карточка "Выберите пользователя" -->
            <div class="card custom-card mb-4">
                <div class="custom-card-header">
                    <h5 class="mb-0">Выберите пользователя</h5>
                </div>
                <div class="custom-card-body">

                    <!-- Разделяем "Пользователь:" на 2 столбца (деловая разметка) -->
                    <div class="row mb-3 align-items-center">
                        <div class="col-sm-4 text-end">
                            <label for="SelectedUser" class="col-form-label">Пользователь:</label>
                        </div>
                        <div class="col-sm-8">
                            <select id="SelectedUser" name="SelectedUser" class="form-select multi-col-select"
                                    onchange="onUserSelectionChanged(this.value)">
                                <option value="">-- Не выбран --</option>
                                @foreach (var usr in Model.AllUsers)
                                {
                                    <option value="@usr" selected="@(Model.SelectedUserName == usr ? "selected" : null)">
                                        @usr
                                    </option>
                                }
                            </select>
                        </div>
                    </div>

                </div>
            </div>

            <!-- Карточка "Выбор подразделений" -->
            <div class="card custom-card mb-4">
                <div class="custom-card-header">
                    <h5 class="mb-0">Выбор подразделений для просмотра</h5>
                </div>
                <div class="custom-card-body">
                    @if (!string.IsNullOrEmpty(Model.SelectedUserName))
                    {
                        <!-- Список чекбоксов в 3 столбца -->
                        <div id="subdivisionList" class="subdivisions-grid-3">
                            @* 
                              Выводим все подразделения в три колонки 
                              (grid-template-columns: repeat(3, 1fr)) 
                            *@
                            @foreach (var sub in Model.Subdivisions)
                            {
                                bool isChecked = Model.UserSelectedDivisionIds.Contains(sub.IdDivision);
                                <div class="form-check d-flex align-items-center">
                                    <input class="form-check-input" type="checkbox"
                                           id="sub_@sub.IdDivision"
                                           value="@sub.IdDivision"
                                    @(isChecked ? "checked" : null) />
                                    <label class="form-check-label" for="sub_@sub.IdDivision">
                                        @sub.SmallNameDivision
                                    </label>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">Сначала выберите пользователя</p>
                    }
                </div>
            </div>
        </div>

        <!-- Правая колонка: Настройки приватности + смена пароля + кнопка "Сохранить" -->
        <div class="col-md-7">
            <div class="card custom-card mb-4">
                <div class="custom-card-header">
                    <h5 class="mb-0">Настройки приватности</h5>
                </div>
                <div class="custom-card-body">
                    @if (!string.IsNullOrEmpty(Model.SelectedUserName))
                    {
                        <!-- Таблица с настройками -->
                        <table class="table table-bordered table-custom">
                            <thead>
                                <tr>
                                    <th>Параметр</th>
                                    <th>Разрешено?</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Возможность закрывать работы</td>
                                    <td class="text-center">
                                        <input type="checkbox"
                                               id="canCloseWork"
                                        @(Model.CurrentPrivacySettings.CanCloseWork ? "checked" : "") />
                                    </td>
                                </tr>
                                <tr>
                                    <td>Возможность отправлять заявки на закрытие работы</td>
                                    <td class="text-center">
                                        <input type="checkbox"
                                               id="canSendCloseRequest"
                                        @(Model.CurrentPrivacySettings.CanSendCloseRequest ? "checked" : "") />
                                    </td>
                                </tr>
                                <tr>
                                    <td>Доступ к настройкам</td>
                                    <td class="text-center">
                                        <input type="checkbox"
                                               id="canAccessSettings"
                                        @(Model.CurrentPrivacySettings.CanAccessSettings ? "checked" : "") />
                                    </td>
                                </tr>
                            </tbody>
                        </table>

                        <!-- Поле для смены пароля -->
                        <div class="mb-3">
                            <label for="newPasswordForSelectedUser" class="form-label">Новый пароль (если нужно сменить):</label>
                            <input type="password" id="newPasswordForSelectedUser" class="form-control" />
                        </div>

                        <!-- Кнопка сохранения всех настроек (приватность, подразделения, пароль) -->
                        <div class="text-end">
                            <button class="btn btn-success shadow-sm" onclick="saveAllSettings()">Сохранить</button>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">Выберите пользователя слева, чтобы отобразить его настройки</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно "Регистрация пользователя" -->
<div class="modal fade" id="registerUserModal" tabindex="-1" aria-labelledby="registerUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 id="registerUserModalLabel" class="modal-title">Регистрация пользователя</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
            </div>
            <div class="modal-body">
                <!-- ФИО -->
                <div class="mb-3">
                    <label for="newUserFio" class="form-label">ФИО:</label>
                    <input type="text" id="newUserFio" class="form-control" placeholder="Иванов Иван Иванович" />
                </div>

                <!-- Малое имя (smallName) -->
                <div class="mb-3">
                    <label for="newUserSmallName" class="form-label">Коротная запись (login):</label>
                    <input type="text" id="newUserSmallName" class="form-control" placeholder="ivanov_i" />
                </div>

                <!-- Выбор подразделения -->
                <div class="mb-3">
                    <label for="newUserDivision" class="form-label">Подразделение:</label>
                    <select id="newUserDivision" class="form-select">
                        <option value="">-- Не выбрано --</option>
                        @* Используем те же Subdivisions, что и на основной странице *@
                        @foreach (var d in Model.Subdivisions)
                        {
                            <option value="@d.IdDivision">@d.SmallNameDivision</option>
                        }
                    </select>
                </div>

                <!-- Логин -->
                @* <div class="mb-3"> *@
                @*     <label for="newUserLogin" class="form-label">Логин:</label> *@
                @*     <input type="text" id="newUserLogin" class="form-control" placeholder="ivanov" /> *@
                @* </div> *@

                <!-- Пароль -->
                <div class="mb-3">
                    <label for="newUserPassword" class="form-label">Пароль:</label>
                    <input type="password" id="newUserPassword" class="form-control" placeholder="******" />
                </div>

                <!-- Права пользователя (чекбоксы) -->
                <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="newUserCanCloseWork" />
                    <label class="form-check-label" for="newUserCanCloseWork">
                        Может закрывать работы
                    </label>
                </div>
                <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="newUserCanSendCloseRequest" />
                    <label class="form-check-label" for="newUserCanSendCloseRequest">
                        Может отправлять заявки на закрытие
                    </label>
                </div>
                <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="newUserCanAccessSettings" />
                    <label class="form-check-label" for="newUserCanAccessSettings">
                        Имеет доступ к настройкам
                    </label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" onclick="registerNewUser()">Зарегистрировать</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Смена выбранного пользователя в выпадающем меню
        function onUserSelectionChanged(userName) {
            if (userName) {
                window.location.href = '?SelectedUserName=' + encodeURIComponent(userName);
            } else {
                window.location.href = '?SelectedUserName=';
            }
        }

        // Единая функция, которая сохраняет:
        // 1) настройки приватности
        // 2) выбранные подразделения
        // 3) (опционально) новый пароль
        // последовательно, одной кнопкой.
        function saveAllSettings() {
            let userName = document.getElementById("SelectedUser").value;
            if (!userName) {
                alert("Сначала выберите пользователя");
                return;
            }
            // Собираем данные для приватных настроек
            let canCloseWork = document.getElementById("canCloseWork").checked;
            let canSendCloseRequest = document.getElementById("canSendCloseRequest").checked;
            let canAccessSettings = document.getElementById("canAccessSettings").checked;

            // Собираем выбранные подразделения
            let checks = document.querySelectorAll("#subdivisionList input[type=checkbox]");
            let selectedSubs = [];
            checks.forEach(ch => {
                if (ch.checked) {
                    selectedSubs.push(parseInt(ch.value));
                }
            });

            // Узнаем, есть ли новый пароль
            let newPass = document.getElementById("newPasswordForSelectedUser").value.trim();

            // 1. Сохраняем приватные настройки
            let privacyData = {
                userName: userName,
                canCloseWork: canCloseWork,
                canSendCloseRequest: canSendCloseRequest,
                canAccessSettings: canAccessSettings
            };

            fetch('?handler=SavePrivacySettings', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(privacyData)
            })
            .then(r => r.json())
            .then(res => {
                if (!res.success) {
                    throw new Error("Ошибка при сохранении приватных настроек: " + res.message);
                }
                // 2. Сохраняем подразделения
                let subData = {
                    userName: userName,
                    subdivisions: selectedSubs
                };
                return fetch('?handler=SaveSubdivisions', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(subData)
                });
            })
            .then(r => r.json())
            .then(res => {
                if (!res.success) {
                    throw new Error("Ошибка при сохранении подразделений: " + res.message);
                }
                // 3. Если поле нового пароля заполнено, меняем пароль
                if (newPass) {
                    let passData = {
                        userName: userName,
                        newPassword: newPass
                    };
                    return fetch('?handler=ChangeUserPassword', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(passData)
                    })
                    .then(r2 => r2.json())
                    .then(res2 => {
                        if (!res2.success) {
                            throw new Error("Ошибка при смене пароля: " + res2.message);
                        }
                        return res2; // для цепочки
                    });
                } else {
                    // Если пароль пуст, пропускаем этот шаг
                    return { success: true };
                }
            })
            .then(_ => {
                // Если мы дошли сюда, значит все три операции прошли успешно
                alert("Настройки успешно сохранены!");
                // Можем перезагрузить страницу
                location.reload();
            })
            .catch(e => {
                // При любой ошибке выведем сообщение
                alert(e.message);
                console.error(e);
            });
        }

        // Регистрация нового пользователя
        function registerNewUser() {
            let fio = document.getElementById("newUserFio").value.trim();
            let smallName = document.getElementById("newUserSmallName").value.trim();
            let divisionId = document.getElementById("newUserDivision").value;
            let login = document.getElementById("newUserLogin").value.trim();
            let password = document.getElementById("newUserPassword").value.trim();
            let canClose = document.getElementById("newUserCanCloseWork").checked;
            let canSend = document.getElementById("newUserCanSendCloseRequest").checked;
            let canSettings = document.getElementById("newUserCanAccessSettings").checked;

            if (!fio || !login || !password) {
                alert("Пожалуйста, заполните ФИО, логин и пароль.");
                return;
            }

            let data = {
                fullName: fio,
                smallName: smallName,
                idDivision: divisionId ? parseInt(divisionId) : null,
                login: login,
                password: password,
                canCloseWork: canClose,
                canSendCloseRequest: canSend,
                canAccessSettings: canSettings
            };

            fetch('?handler=RegisterUser', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })
            .then(r => r.json())
            .then(res => {
                if (res.success) {
                    alert("Пользователь зарегистрирован!");
                    let modalEl = document.getElementById('registerUserModal');
                    let modal = bootstrap.Modal.getInstance(modalEl);
                    modal.hide();
                    location.reload();
                } else {
                    alert("Ошибка регистрации: " + res.message);
                }
            })
            .catch(e => console.error(e));
        }
    </script>

    <!-- Стили, специфичные только для страницы "Settings" (деловой стиль) -->
    <style>
        /* Общие стили для card в настройках */
        .custom-card {
            border: none;
            border-radius: 12px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.1);
            transition: transform 0.3s;
        }

            .custom-card:hover {
                transform: scale(1.005);
            }

        .custom-card-header {
            background-color: #495057;
            color: #fff;
            border-top-left-radius: 12px;
            border-top-right-radius: 12px;
            padding: 1rem;
        }

        .custom-card-body {
            padding: 1rem;
            background-color: #ffffff;
            border-bottom-left-radius: 12px;
            border-bottom-right-radius: 12px;
        }

        .table-custom {
            background-color: #fff;
            border-radius: 8px;
            overflow: hidden;
        }

            .table-custom thead {
                background: #e9ecef;
            }

        /* Мультиколонный select (попытка разбить опции на 2 столбца) */
        .multi-col-select {
            /* Зададим высоту и укажем, что опции распределяются по 2 колонкам */
            height: auto;
            -webkit-column-count: 2;
            -moz-column-count: 2;
            column-count: 2;
        }
            /* Бывает, что нужно отключить перенос внутри опций */
            .multi-col-select option {
                -webkit-column-break-inside: avoid;
                -moz-column-break-inside: avoid;
                column-break-inside: avoid;
            }

        /* Для чекбоксов в подразделениях */
        .form-check-label {
            cursor: pointer;
        }

        /* 3-колоночное расположение чекбоксов для подразделений */
        .subdivisions-grid-3 {
            display: grid;
            grid-template-columns: repeat(3, 1fr); /* 3 столбца */
            gap: 0.5rem;
        }

        /* Увеличим хитбокс чекбоксов слегка */
        .form-check-input {
            transform: scale(1.1);
            margin-right: 8px;
        }
    </style>
}