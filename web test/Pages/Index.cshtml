@page
@using Monitoring.UI.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model IndexModel
@{
    ViewData["Title"] = "Главная страница";
}

<!-- Подключение необходимых стилей (можно часть вынести в Layout) -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/smoothness/jquery-ui.css" />
<link rel="stylesheet" href="css/index.css" />


<div class="container-fluid mt-4">
    <!-- Шапка: подразделение, пользователь, фильтры -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex flex-wrap align-items-center justify-content-between bg-light p-3 rounded">
                <div>
                    <h5 class="mb-0">Подразделение: @Model.DepartmentName</h5>
                    <p class="text-muted mb-0">Текущий пользователь: @Model.UserName</p>
                </div>

                <!-- Форма с фильтрами -->
                <form method="get" id="filterForm" class="d-flex flex-wrap align-items-end gap-2">
                    <!-- Фильтр по датам -->
                    <div class="d-flex flex-column">
                        <label for="startDate" class="form-label">C даты:</label>
                        <input type="date" class="form-control" id="startDate" name="StartDate"
                               value="@(Model.StartDate?.ToString("yyyy-MM-dd") ?? "")" />
                    </div>
                    <div class="d-flex flex-column">
                        <label for="endDate" class="form-label">По дату:</label>
                        <input type="date" class="form-control" id="endDate" name="EndDate"
                               value="@(Model.EndDate?.ToString("yyyy-MM-dd") ?? "")" />
                    </div>

                    <!-- Выпадающий список для выбора исполнителя -->
                    <div class="d-flex flex-column">
                        <label for="executor" class="form-label">Исполнитель:</label>
                        <select id="executor" name="executor" class="form-select">
                            <option value="">Все исполнители</option>
                            @foreach (var item in Model.Executors)
                            {
                                <option value="@item" selected="@(item == Model.Executor ? "selected" : null)">
                                    @item
                                </option>
                            }
                        </select>
                    </div>

                    <!-- Поле поиска -->
                    <div class="d-flex flex-column">
                        <label for="search" class="form-label">Поиск:</label>
                        <input type="text" class="form-control" id="search" name="search"
                               placeholder="Поиск..." value="@Model.SearchQuery" />
                    </div>

                    <div class="d-flex justify-content-end gap-3 mb-4">
                        <!-- Кнопка выхода -->
                        <a asp-page="./Index" asp-page-handler="Logout"
                           class="btn btn-logout">
                            Выход
                        </a>

                        <!-- Кнопка обновить -->
                        <button type="button" class="btn btn-sm btn-outline-info" id="refreshCacheBtn"
                                onclick="refreshCache()">
                            Обновить
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Внешний контейнер с отступом снизу и горизонтальными отступами gx-3 -->
    <div class="row mb-3 gx-3" style="min-height: 50px;">
        <!-- Левая колонка: д-flex, flex-column для &laquo;растягивания&raquo; карточки -->
        <div class="col d-flex flex-column">
            <div class="card shadow-sm flex-fill" style="min-width: 300px;">
                <div class="card-header bg-warning">
                    <h6 class="mb-0" style="font-size: 0.95rem;">Уведомления</h6>
                </div>
                <div class="card-body p-2" style="font-size: 0.85rem;">
                    @if (Model.Notifications != null && Model.Notifications.Count > 0)
                    {
                        <table class="table table-sm table-bordered table-hover align-middle mb-0" style="font-size:0.85rem;">
                            <thead class="table-secondary">
                                <tr>
                                    @* <th style="width: 45px;">№</th> *@
                                    <th>Заголовок</th>
                                    <th style="width: 100px;">Кому</th>
                                    <th style="width: 90px;">Дата</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var note in Model.Notifications)
                                {
                                    <tr>
                                        @* <td>@note.Id</td> *@
                                        <td>@note.Title</td>
                                        <td>@note.UserName</td>
                                        <td>@note.DateSetInSystem.ToShortDateString()</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p class="text-muted mb-0">Нет активных уведомлений.</p>
                    }
                </div>
            </div>
        </div>

        <!-- Правая колонка: col-auto (или col-1) + d-flex + flex-column + justify-content-end -->
        <div class="col-auto d-flex flex-column justify-content-end">
            <form method="post">
                <input type="hidden" asp-for="StartDate" />
                <input type="hidden" asp-for="EndDate" />
                <input type="hidden" asp-for="Executor" />
                <input type="hidden" asp-for="SearchQuery" />
                <input type="hidden" name="SelectedItemsOrder" id="SelectedItemsOrder" />

                <div class="d-flex justify-content-end">
                    <select name="format">
                        <option value="pdf">PDF</option>
                        <option value="excel">Excel</option>
                        <option value="word">Word</option>
                    </select>
                    <button type="submit" class="btn btn-pdf" id="generatePdfBtn">
                        <span class="spinner-border spinner-border-sm me-2"
                              role="status" aria-hidden="true" style="display:none;"></span>
                        Сдаточный чек
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Основная таблица (partial) -->
    <div class="row mb-4">
        <div class="col-12">
            <div id="workItemsTableContainer">
                @await Html.PartialAsync("_WorkItemsTablePartial", Model)
            </div>
        </div>
    </div>

    <!-- "Мои входящие заявки" (для Accept/Decline) -->
    <div class="row mb-4">
        <div class="col-12">
            <h5>Мои входящие заявки</h5>
            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th>Наименование документа</th>
                        <th>Наименование работы</th>
                        <th>Документ</th>
                        <th>Тип</th>
                        <th>Предлагаемая дата</th>
                        <th>Отправитель</th>
                        <th>Примечание</th>
                        <th>Действие</th>
                    </tr>
                </thead>
                <tbody id="myRequestsTbody">
                    <!-- JS заполнит -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Модальное окно (Bootstrap) для создания заявки -->
<div class="modal fade" id="requestModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Отправить запрос</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="hiddenDocNumber" />

                <!-- Тип запроса -->
                <div class="mb-3">
                    <label for="requestTypeSelect" class="form-label">Тип запроса</label>
                    <select id="requestTypeSelect" class="form-select">
                        <option value="корр1">корр1</option>
                        <option value="корр2">корр2</option>
                        <option value="корр3">корр3</option>
                        <option value="fact">Фактическое закрытие</option>
                    </select>
                </div>

                <!-- Желаемая дата -->
                <div class="mb-3">
                    <label for="proposedDate" class="form-label">Желаемая дата</label>
                    <input type="date" id="proposedDate" class="form-control" />
                </div>

                <!-- Получатель (Controller/Approver) -->
                <div class="mb-3">
                    <label for="receiverSelect" class="form-label">Получатель</label>
                    <select id="receiverSelect" class="form-select">
                        <!-- Заполняется в openRequestModal(...) -->
                    </select>
                </div>

                <!-- Примечание -->
                <div class="mb-3">
                    <label for="requestNote" class="form-label">Примечание</label>
                    <textarea id="requestNote" class="form-control" rows="3"></textarea>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                <button type="button" class="btn btn-primary" onclick="sendWorkRequest()">Отправить</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <!-- Дополнительные стили -->
    <style>
        /* Пример ограничений для Handsontable */
        #spreadsheet {
            width: 100%;
            height: 80vh;
            overflow: auto;
            max-width: 100%;
        }

        .handsontable th,
        .handsontable td {
            min-width: 50px;
            max-width: 300px;
        }

        .handsontable {
            box-sizing: border-box;
        }

            .handsontable colHeader {
                position: sticky;
                top: 0;
                background-color: #f8f9fa;
                z-index: 1;
            }

        /* Подсветка выбранной (чекбоксом) строки */
        .selected-row {
            background-color: #e9f7ef !important; /* Светло-зеленый фон */
        }

        /* Иконка/элемент для "перетаскивания" строк */
        .drag-handle {
            cursor: move;
            margin-left: 5px;
            opacity: 0.7;
            transition: opacity 0.2s;
        }

            .drag-handle:hover {
                opacity: 1;
            }

        /* Кнопка "Выделить/снять все" */
        .toggle-all-btn {
            cursor: pointer;
            margin-left: 8px;
            opacity: 0.7;
            transition: all 0.3s;
        }

            .toggle-all-btn:hover {
                opacity: 1;
                transform: scale(1.2);
            }

        /* Кнопка PDF */
        .btn-pdf {
            background: linear-gradient(145deg, #2c3e50, #34495e);
            color: white !important;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            position: relative;
            overflow: hidden;
        }

            .btn-pdf:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 12px rgba(0,0,0,0.2);
                background: linear-gradient(145deg, #34495e, #2c3e50);
            }

            .btn-pdf:active {
                transform: translateY(1px);
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }

        /* Кнопка "Выход" */
        .btn-logout {
            border: 2px solid #dc3545;
            color: #dc3545;
            background: transparent;
            padding: 5px 10px;
            border-radius: 8px;
            transition: all 0.4s ease;
            position: relative;
        }

            .btn-logout:hover {
                background: rgba(220, 53, 69, 0.9);
                color: white !important;
                border-color: transparent;
                box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
            }

        .spinner-border {
            vertical-align: text-top;
        }

        /* Уменьшенный шрифт для уведомлений */
        .table-sm {
            font-size: 0.85rem;
        }
    </style>

    <script>
        // Инициализация сортировки строк + чекбоксы (PDF)
        function initSortableTable() {
            var $tableBody = $("#workItemsTable tbody");

            // Функция, которая пробегается сверху вниз и ставит 1,2,3...
            function reindexRows() {
                $tableBody.find("tr").each(function(index, row) {
                    // В первой ячейке с классом .row-index ставим (index+1)
                    $(row).find(".row-index").text(index + 1);
                });
            }

            // Сортируем строки
            $tableBody.sortable({
                handle: ".drag-handle",
                axis: "y",
                cursor: "move",
                start: function(event, ui) {
                    // При начале перетаскивания отмечаем чекбокс
                    ui.item.find('.row-select').prop('checked', true);
                    ui.item.addClass('selected-row');
                },
                update: function(event, ui) {
                    console.log('Порядок изменен');
                    reindexRows(); // <-- вот здесь пере-индексация
                }
            });
            $tableBody.disableSelection();

            // Чекбоксы
            $('#workItemsTable').on('change', '.row-select', function() {
                $(this).closest('tr').toggleClass('selected-row', this.checked);
            });
            $('#workItemsTable .row-select:checked').closest('tr').addClass('selected-row');

            // "Выделить/снять все"
            $('.toggle-all-btn').off('click').on('click', function() {
                let all = $('#workItemsTable .row-select');
                let anyUnchecked = all.filter(':not(:checked)').length > 0;
                all.prop('checked', anyUnchecked).trigger('change');
            });
        }

        $(document).ready(function(){
            initSortableTable();

            // AJAX-фильтр: при изменении полей
            $('#startDate, #endDate, #executor, #search').on('change keyup', function() {
                $.ajax({
                    url: '@Url.Page("Index", "Filter")',
                    type: 'GET',
                    data: {
                        startDate: $('#startDate').val(),
                        endDate: $('#endDate').val(),
                        executor: $('#executor').val(),
                        searchQuery: $('#search').val()
                    },
                    success: function(result) {
                        $('#workItemsTableContainer').html(result);
                        initSortableTable();

                        // Передаём в скрытые поля для POST
                        $('input[name="StartDate"]').val($('#startDate').val());
                        $('input[name="EndDate"]').val($('#endDate').val());
                        $('input[name="Executor"]').val($('#executor').val());
                        $('input[name="SearchQuery"]').val($('#search').val());
                    }
                });
            });

            // Обработка кнопки "Сгенерировать PDF" (формирование SelectedItemsOrder)
            $('#generatePdfBtn').on('click', function() {
                let rows = document.querySelectorAll("#workItemsTable tbody tr");
                let result = [];
                rows.forEach((row) => {
                    let checkbox = row.querySelector("input.row-select");
                    if (checkbox && checkbox.checked) {
                        result.push(row.getAttribute("data-id") || "");
                    }
                });
                $("#SelectedItemsOrder").val(JSON.stringify(result));
            });

            // Загрузим "мои заявки" (pending)
            loadMyPendingRequests();
        });

        // ----------------------------------------------------
        // Модальное окно: заполнение полей, открытие
        // ----------------------------------------------------
        function openRequestModal(docNumber, controller, approver) {
            $('#hiddenDocNumber').val(docNumber);
            $('#proposedDate').val("");
            $('#requestNote').val("");

            let receiverSelect = document.getElementById('receiverSelect');
            receiverSelect.innerHTML = "";

            // Добавим "Контролирующий"
            let optCtrl = document.createElement('option');
            optCtrl.value = controller;
            optCtrl.textContent = `Контролирующий (${controller})`;
            receiverSelect.appendChild(optCtrl);

            // Добавим "Принимающий"
            let optAppr = document.createElement('option');
            optAppr.value = approver;
            optAppr.textContent = `Принимающий (${approver})`;
            receiverSelect.appendChild(optAppr);

            // Открываем модалку
            let modal = new bootstrap.Modal(document.getElementById('requestModal'));
            modal.show();
        }

        // ----------------------------------------------------
        // Отправка заявки (создание)
        // ----------------------------------------------------
        function sendWorkRequest() {
            let docNumber = $('#hiddenDocNumber').val();
            let requestType = $('#requestTypeSelect').val();
            let proposedDate = $('#proposedDate').val(); // string (YYYY-MM-DD)
            let receiver = $('#receiverSelect').val();
            let note = $('#requestNote').val();
            let sender = '@Model.UserName';

            // Преобразуем proposedDate в формат, который десериализуется как DateTime
            // Если пустая строка -> null
            let dateObj = proposedDate ? new Date(proposedDate + "T00:00:00") : null;

            let data = {
                DocumentNumber: docNumber,
                RequestType: requestType,
                Sender: sender,
                Receiver: receiver,
                ProposedDate: dateObj,
                Note: note
            };

            fetch('@Url.Page("Index", "CreateRequest")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })
            .then(r => r.json())
            .then(res => {
                if (res.success) {
                    alert("Заявка отправлена!");
                    let modalEl = document.getElementById('requestModal');
                    let modal = bootstrap.Modal.getInstance(modalEl);
                    modal.hide();

                    // Подсветим строку
                    let row = document.querySelector(`tr[data-id="${docNumber}"]`);
                    if (row) {
                        if (requestType.startsWith('корр'))
                            row.classList.add('table-warning'); // коричневато-жёлтый
                        else if (requestType === 'fact')
                            row.classList.add('table-info');    // голубой
                    }
                } else {
                    alert("Ошибка: " + res.message);
                }
            })
            .catch(e => console.error(e));
        }

        // ----------------------------------------------------
        // Загрузка моих входящих заявок (Receiver == @Model.UserName)
        // и их отображение в таблице
        // ----------------------------------------------------
        function loadMyPendingRequests() {
            // AJAX GET: Index?handler=GetMyRequests
            // (В IndexModel написать методOnGetMyRequestsAsync, который вернёт JSON заявок)
            fetch('@Url.Page("Index", "MyRequests")')
            .then(r => r.json())
            .then(data => {
                let tbody = document.getElementById('myRequestsTbody');
                tbody.innerHTML = "";
                data.forEach(req => {
                    let tr = document.createElement('tr');
                    let dateStr = req.proposedDate ? req.proposedDate.substring(0,10) : '';
                    let noteStr = req.note || '';

                    tr.innerHTML = `
                        <td>${"Пусто пока"}</td>
                        <td>${"Пусто пока"}</td>
                        <td>${req.workDocumentNumber}</td>
                        <td>${req.requestType}</td>
                        <td>${dateStr}</td>
                        <td>${req.sender}</td>
                        <td>${noteStr}</td>
                        <td>
                            <button class="btn btn-sm btn-success"
                                onclick="setRequestStatus(${req.id}, '${req.workDocumentNumber}', 'Accepted')">
                                Принять
                            </button>
                            <button class="btn btn-sm btn-danger"
                                onclick="setRequestStatus(${req.id}, '${req.workDocumentNumber}', 'Declined')">
                                Отклонить
                            </button>
                        </td>
                    `;
                    tbody.appendChild(tr);
                });
            })
            .catch(e => console.error(e));
        }

        function setRequestStatus(requestId, docNumber, newStatus) {
            let bodyData = {
                RequestId: requestId,
                DocumentNumber: docNumber,
                NewStatus: newStatus
            };
            fetch('@Url.Page("Index", "SetRequestStatus")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(bodyData)
            })
            .then(r => r.json())
            .then(res => {
                if (res.success) {
                    alert("Статус обновлён: " + newStatus);
                    // Перезагрузить список заявок
                    loadMyPendingRequests();
                } else {
                    alert("Ошибка: " + res.message);
                }
            })
            .catch(e => console.error(e));
        }

                function refreshCache() {
            // Получаем саму кнопку
            let btn = document.getElementById('refreshCacheBtn');

            // Сохраняем исходный текст (на случай, если нужно будет вернуть)
            let originalText = btn.innerHTML;

            // Блокируем кнопку сразу, чтобы пользователь не нажимал её повторно
            btn.disabled = true;

            // Меняем текст на &laquo;Обновляю…&raquo; (можно добавить иконку-спиннер, например)
            btn.innerHTML = "Обновляю...";

            // Делаем POST запрос к хендлеру RefreshCache
            fetch('@Url.Page("Index", "RefreshCache")', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(res => {
                if (res.success) {
                    // Если всё ок, запускаем обратный счёт перед перезагрузкой:
                    let countdown = 5; // количество секунд
                    let timerId = setInterval(() => {
                        countdown--;
                        // Меняем текст в кнопке, чтобы было видно, сколько осталось
                        btn.innerHTML = `Ожидайте ${countdown}c`;

                        if (countdown <= 0) {
                            clearInterval(timerId);
                            // Когда счёт дошёл до нуля — перезагружаем страницу
                            location.reload();
                        }
                    }, 1000);
                } else {
                    // Если пришёл ответ с ошибкой
                    alert("Ошибка при очистке кэша: " + res.message);
                    // Возвращаем исходный текст и разблокируем кнопку
                    btn.innerHTML = originalText;
                    btn.disabled = false;
                }
            })
            .catch(error => {
                // Если произошла любая другая ошибка сети
                console.error(error);
                alert("Ошибка сети при обновлении кэша");

                // Возвращаем исходный текст и разблокируем
                btn.innerHTML = originalText;
                btn.disabled = false;
            });
        }
    </script>
}