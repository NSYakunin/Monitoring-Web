@page
@using Monitoring.UI.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model IndexModel

@{
    ViewData["Title"] = "Главная страница";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/smoothness/jquery-ui.css" />
<link rel="stylesheet" href="css/index.css" />

<div class="container-fluid mt-4">

    <!-- Шапка: подразделение, пользователь, фильтры -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex flex-wrap align-items-center justify-content-between bg-light p-3 rounded">
                <div>
                    <h5 class="mb-0">Подразделение: @Model.DepartmentName</h5>
                    <p class="text-muted mb-0">Текущий пользователь: @Model.UserName</p>
                </div>

                <!-- Форма с фильтрами -->
                <form method="get" id="filterForm" class="d-flex flex-wrap align-items-end gap-2">
                    <!-- Скрытые поля для сохранения флага UseAllDivisions и номера текущей страницы -->
                    <input type="hidden" name="useAllDivisions" id="useAllDivisions" value="@Model.UseAllDivisions" />
                    <input type="hidden" name="currentPage" id="currentPage" value="@Model.CurrentPage" />

                    <!-- Фильтр по датам -->
                    <div class="d-flex flex-column">
                        <label for="startDate" class="form-label">C даты:</label>
                        <input type="date" class="form-control" id="startDate" name="StartDate"
                               value="@(Model.StartDate?.ToString("yyyy-MM-dd") ?? "")" />
                    </div>
                    <div class="d-flex flex-column">
                        <label for="endDate" class="form-label">По дату:</label>
                        <input type="date" class="form-control" id="endDate" name="EndDate"
                               value="@(Model.EndDate?.ToString("yyyy-MM-dd") ?? "")" />
                    </div>

                    <!-- Подразделение -->
                    <div class="d-flex flex-column">
                        <label for="divisionSelect" class="form-label">Подразделение:</label>
                        <select id="divisionSelect" name="SelectedDivision" class="form-select">
                            <!-- Новая опция "Выбрать все" -->
                            <option value="0" selected="@(Model.SelectedDivision == 0 ? "selected" : null)">Выбрать все</option>
                            @foreach (var div in Model.AllowedDivisions)
                            {
                                <option value="@div.IdDivision" selected="@(div.IdDivision == Model.SelectedDivision ? "selected" : null)">
                                    @div.SmallNameDivision
                                </option>
                            }
                        </select>
                    </div>

                    <!-- Исполнитель -->
                    <div class="d-flex flex-column">
                        <label for="executor" class="form-label">Исполнитель:</label>
                        <select id="executor" name="executor" class="form-select">
                            <option value="">Все исполнители</option>
                            @foreach (var item in Model.Executors)
                            {
                                <option value="@item" selected="@(item == Model.Executor ? "selected" : null)">
                                    @item
                                </option>
                            }
                        </select>
                    </div>

                    <!-- Принимающий -->
                    <div class="d-flex flex-column">
                        <label for="approver" class="form-label">Принимающий:</label>
                        <select id="approver" name="approver" class="form-select">
                            <option value="">Все принимающие</option>
                            @foreach (var ap in Model.Approvers)
                            {
                                <option value="@ap" selected="@(ap == Model.Approver ? "selected" : null)">
                                    @ap
                                </option>
                            }
                        </select>
                    </div>

                    <!-- Поиск -->
                    <div class="d-flex flex-column">
                        <label for="search" class="form-label">Поиск:</label>
                        <input type="text" class="form-control" id="search" name="search"
                               placeholder="Поиск..." value="@Model.SearchQuery" />
                    </div>

                    <div class="d-flex justify-content-end gap-3 mb-4">
                        <!-- Кнопка выхода -->
                        <a asp-page="./Index" asp-page-handler="Logout" class="btn btn-logout">
                            Выход
                        </a>
                        <!-- Обновить (очистка кэша) -->
                        <button type="button" class="btn btn-sm btn-outline-info" id="refreshCacheBtn"
                                onclick="refreshCache()">
                            Обновить
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Уведомления + кнопка экспорта -->
    <div class="row mb-3 gx-3" style="min-height: 50px;">
        <div class="col d-flex flex-column">
            <div class="card shadow-sm flex-fill" style="min-width: 300px;">
                <div class="card-header bg-warning">
                    <h6 class="mb-0" style="font-size: 0.95rem;">Уведомления</h6>
                </div>
                <div class="card-body p-2" style="font-size: 0.85rem;">
                    @if (Model.Notifications != null && Model.Notifications.Count > 0)
                    {
                        <table class="table table-sm table-bordered table-hover align-middle mb-0" style="font-size:0.85rem;">
                            <thead class="table-secondary">
                                <tr>
                                    <th>Заголовок</th>
                                    <th style="width: 100px;">Кому</th>
                                    <th style="width: 90px;">Дата</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var note in Model.Notifications)
                                {
                                    <tr>
                                        <td>@note.Title</td>
                                        <td>@note.UserName</td>
                                        <td>@note.DateSetInSystem.ToShortDateString()</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p class="text-muted mb-0">Нет активных уведомлений.</p>
                    }
                </div>
            </div>
        </div>

        <div class="col-auto d-flex flex-column">
            <div class="d-flex flex-column gap-2">
                <form method="post" id="exportForm" class="w-100">
                    <input type="hidden" asp-for="StartDate" />
                    <input type="hidden" asp-for="EndDate" />
                    <input type="hidden" asp-for="Executor" />
                    <input type="hidden" asp-for="Approver" />
                    <input type="hidden" name="SelectedItemsOrder" id="SelectedItemsOrder" />
                    <input type="hidden" asp-for="SelectedDivision" />
                    <input type="hidden" name="format" id="formatInput" value="pdf" />

                    <div class="btn-group dropup w-100">
                        <button type="button"
                                class="btn btn-pdf dropdown-toggle w-100"
                                data-bs-toggle="dropdown"
                                aria-expanded="false"
                                id="generatePdfBtn">
                            <span class="spinner-border spinner-border-sm me-2"
                                  role="status" aria-hidden="true"
                                  style="display:none;"></span>
                            Сдаточный чек
                        </button>
                        <ul class="dropdown-menu w-100" aria-labelledby="generatePdfBtn">
                            <li><a class="dropdown-item" href="#" onclick="setFormat('pdf')">PDF</a></li>
                            <li><a class="dropdown-item" href="#" onclick="setFormat('excel')">Excel</a></li>
                            <li><a class="dropdown-item" href="#" onclick="setFormat('word')">Word</a></li>
                        </ul>
                    </div>
                </form>

                @if (Model.HasCloseWorkAccess)
                {
                    <a href="/MyRequests"
                       class="btn btn-myrequests @(Model.HasPendingRequests ? "btn-myrequests-new" : "btn-myrequests-none") w-100">
                        Входящие заявки
                    </a>
                }

                <!-- Изменённая кнопка "Исполнительность" с новым оформлением -->
                <a asp-page="./Performance" class="btn btn-performance w-100">
                    Исполнительность
                </a>
            </div>
        </div>
    </div>

    <!-- Основная таблица (partial) -->
    <div class="row mb-4">
        <div class="col-12">
            <div id="workItemsTableContainer">
                @await Html.PartialAsync("_WorkItemsTablePartial", Model)
            </div>
        </div>
    </div>

    @*
    <!-- Блок "Мои входящие заявки" закомментирован, т.к. вынесен на отдельную страницу:
    <div class="row mb-4">
        ...
    </div>
    *@

</div>

<!-- Модальное окно для создания/редактирования заявки -->
<div class="modal fade" id="requestModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Заявка</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="hiddenDocNumber" />
                <input type="hidden" id="hiddenRequestId" />

                <div class="mb-3">
                    <label for="requestTypeSelect" class="form-label">Тип запроса</label>
                    <select id="requestTypeSelect" class="form-select">
                        <option value="корр1">корр1</option>
                        <option value="корр2">корр2</option>
                        <option value="корр3">корр3</option>
                        <option value="факт">Фактическое закрытие</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label for="proposedDate" class="form-label">Желаемая дата</label>
                    <input type="date" id="proposedDate" class="form-control" />
                </div>

                <div class="mb-3">
                    <label for="receiverSelect" class="form-label">Получатель</label>
                    <select id="receiverSelect" class="form-select">
                        <!-- заполняется при открытии модалки -->
                    </select>
                </div>

                <div class="mb-3">
                    <label for="requestNote" class="form-label">Примечание</label>
                    <textarea id="requestNote" class="form-control" rows="3"></textarea>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="createRequestBtn"
                        onclick="createWorkRequest()">
                    Отправить
                </button>
                <button type="button" class="btn btn-success" id="updateRequestBtn"
                        onclick="updateWorkRequest()">
                    Обновить
                </button>
                <button type="button" class="btn btn-danger" id="deleteRequestBtn"
                        onclick="deleteWorkRequest()">
                    Удалить
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <style>
        /* Небольшие стили, чтобы было удобно */
        #spreadsheet {
            width: 100%;
            height: 80vh;
            overflow: auto;
            max-width: 100%;
        }

        .handsontable th,
        .handsontable td {
            min-width: 50px;
            max-width: 300px;
        }

        .handsontable {
            box-sizing: border-box;
        }

        .selected-row {
            background-color: #e9f7ef !important; /* Светло-зелёный фон */
        }

        .toggle-all-btn {
            cursor: pointer;
            margin-left: 8px;
            opacity: 0.7;
            transition: all 0.3s;
        }

            .toggle-all-btn:hover {
                opacity: 1;
                transform: scale(1.2);
            }

        .btn-pdf {
            background: linear-gradient(145deg, #2c3e50, #34495e);
            color: white !important;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

            .btn-pdf:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 12px rgba(0,0,0,0.2);
                background: linear-gradient(145deg, #34495e, #2c3e50);
            }

            .btn-pdf:active {
                transform: translateY(1px);
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }

        .btn-logout {
            border: 2px solid #dc3545;
            color: #dc3545;
            background: transparent;
            padding: 5px 10px;
            border-radius: 8px;
            transition: all 0.4s ease;
            position: relative;
        }

            .btn-logout:hover {
                background: rgba(220, 53, 69, 0.9);
                color: white !important;
                border-color: transparent;
                box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
            }

        .btn-myrequests {
            margin-top: 10px;
            margin-left: auto;
            display: inline-block;
            text-align: center;
            padding: 10px 20px;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
            border: none;
        }

        .btn-myrequests-none {
            background: #6c757d;
            color: #f8f9fa;
        }

            .btn-myrequests-none:hover {
                background: #5a6268;
                color: #ffffff;
            }

        .btn-myrequests-new {
            background: #ffc107;
            color: #212529;
            box-shadow: 0 4px 8px rgba(255,193,7,0.4);
        }

            .btn-myrequests-new:hover {
                background: #ffca2c;
                color: #212529;
                box-shadow: 0 6px 12px rgba(255,193,7,0.5);
            }

        @@keyframes pulse {
            0% {
                box-shadow: 0 0 0 rgba(255,193,7,0.5);
            }

            50% {
                box-shadow: 0 0 20px rgba(255,193,7,0.7);
            }

            100% {
                box-shadow: 0 0 0 rgba(255,193,7,0.5);
            }
        }

        .btn-myrequests-new {
            animation: pulse 2s infinite;
        }

        .spinner-border {
            vertical-align: text-top;
        }

        .table-sm {
            font-size: 0.85rem;
        }

        .btn-performance {
            background: linear-gradient(145deg, #007bff, #0056b3);
            color: white !important;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            animation: pulseButton 2s infinite;
        }

        @@keyframes pulseButton {
            0% {
                transform: scale(1);
                box-shadow: 0 0 0 rgba(0,123,255,0.7);
            }

            50% {
                transform: scale(1.05);
                box-shadow: 0 0 10px rgba(0,123,255,0.7);
            }

            100% {
                transform: scale(1);
                box-shadow: 0 0 0 rgba(0,123,255,0.7);
            }
        }

        .btn-performance:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0,123,255,0.7);
        }
    </style>

    <script>
        let isDragging = false;

        function initSortableTable() {
            var $tableBody = $("#workItemsTable tbody");

            function reindexRows() {
                $tableBody.find("tr").each(function(index, row) {
                    $(row).find(".row-index").text(index + 1);
                });
            }

            $tableBody.sortable({
                axis: "y",
                cursor: "move",
                start: function(event, ui) {
                    isDragging = true;
                    ui.item.find('.row-select').prop('checked', true).trigger('change');
                },
                stop: function(event, ui) {
                    setTimeout(() => {
                        isDragging = false;
                    }, 50);
                },
                update: function(event, ui) {
                    reindexRows();
                }
            });
            $tableBody.disableSelection();

            $('#workItemsTable').on('change', '.row-select', function() {
                $(this).closest('tr').toggleClass('selected-row', this.checked);
            });
            $('#workItemsTable .row-select:checked').closest('tr').addClass('selected-row');

            $tableBody.on('click', 'tr', function(e) {
                if (isDragging) return;
                if ($(e.target).is('button, a, .btn, input')) return;

                let $checkbox = $(this).find('.row-select');
                let checked = $checkbox.prop('checked');
                $checkbox.prop('checked', !checked).trigger('change');
            });

            $('.toggle-all-btn').off('click').on('click', function() {
                let all = $('#workItemsTable .row-select');
                let anyUnchecked = all.filter(':not(:checked)').length > 0;
                all.prop('checked', anyUnchecked).trigger('change');
            });
        }

        $(document).ready(function(){
            initSortableTable();

            // События для фильтров дат/исполнителя/принимающего/поиска
            // При любом изменении - делаем AJAX загрузку заново, сбрасываем страницу в 1
            $('#startDate, #endDate, #executor, #approver, #search').on('change keyup', function() {
                applyFilterAndRefresh(1);
            });

            // Смена подразделения - отдельно: сначала подгружаем исполнителей/принимающих, затем делаем фильтр
            $('#divisionSelect').on('change', function() {
                var val = $(this).val();
                loadExecutors(val);
                loadApprovers(val);

                // После загрузки списков - запускаем фильтр с текущими параметрами, страница = 1
                applyFilterAndRefresh(1);
            });
        });

        // Общая функция для AJAX-запроса к хендлеру "Filter"
        function applyFilterAndRefresh(pageNumber) {
            $.ajax({
                url: '@Url.Page("Index", "Filter")',
                type: 'GET',
                data: {
                    startDate: $('#startDate').val(),
                    endDate: $('#endDate').val(),
                    executor: $('#executor').val(),
                    approver: $('#approver').val(),
                    searchQuery: $('#search').val(),
                    selectedDivision: $('#divisionSelect').val(),
                    useAllDivisions: $('#useAllDivisions').val(),
                    currentPage: pageNumber
                },
                success: function(result) {
                    $('#workItemsTableContainer').html(result);
                    initSortableTable();

                    // Подменяем скрытые поля
                    $('input[name="StartDate"]').val($('#startDate').val());
                    $('input[name="EndDate"]').val($('#endDate').val());
                    $('input[name="Executor"]').val($('#executor').val());
                    $('input[name="Approver"]').val($('#approver').val());
                    $('input[name="SearchQuery"]').val($('#search').val());
                    $('input[name="SelectedDivision"]').val($('#divisionSelect').val());
                }
            });
        }

        // Функция подгрузки исполнителей (если передан 0 => все валидные пользователи)
        function loadExecutors(divisionId) {
            $.ajax({
                url: '@Url.Page("Index", "Executors")',
                type: 'GET',
                data: { divisionId: divisionId },
                success: function(executors) {
                    let $execSelect = $('#executor');
                    $execSelect.empty();
                    $execSelect.append('<option value="">Все исполнители</option>');
                    $.each(executors, function(index, name) {
                        $execSelect.append($('<option>').val(name).text(name));
                    });
                }
            });
        }

        // Функция подгрузки принимающих (если передан 0 => все валидные пользователи)
        function loadApprovers(divisionId) {
            $.ajax({
                url: '@Url.Page("Index", "Approvers")',
                type: 'GET',
                data: { divisionId: divisionId },
                success: function(approvers) {
                    let $apSelect = $('#approver');
                    $apSelect.empty();
                    $apSelect.append('<option value="">Все принимающие</option>');
                    $.each(approvers, function(index, name) {
                        $apSelect.append($('<option>').val(name).text(name));
                    });
                }
            });
        }

        $('#generatePdfBtn').on('click', function() {
            let rows = document.querySelectorAll("#workItemsTable tbody tr");
            let result = [];
            rows.forEach((row) => {
                let checkbox = row.querySelector("input.row-select");
                if (checkbox && checkbox.checked) {
                    result.push(row.getAttribute("data-id") || "");
                }
            });
            $("#SelectedItemsOrder").val(JSON.stringify(result));
        });

        function openRequestModal(docNumber, controller, approver, btn) {
            let tr = btn.closest('tr');
            let requestId = tr.dataset.requestId || "";
            let reqType = tr.dataset.requestType || "корр1";
            let proposed = tr.dataset.requestDate || "";
            let note = tr.dataset.requestNote || "";

            document.getElementById('hiddenDocNumber').value = docNumber;
            document.getElementById('hiddenRequestId').value = requestId;
            document.getElementById('requestTypeSelect').value = reqType;

            let proposedDateInput = document.getElementById('proposedDate');
            if (requestId) {
                proposedDateInput.value = proposed;
            }
            else {
                let today = new Date();
                let yyyy = today.getFullYear();
                let mm = (today.getMonth() + 1).toString().padStart(2, '0');
                let dd = today.getDate().toString().padStart(2, '0');
                proposedDateInput.value = `${yyyy}-${mm}-${dd}`;
            }

            document.getElementById('requestNote').value = note;

            let receiverSelect = document.getElementById('receiverSelect');
            receiverSelect.innerHTML = "";

            let optCtrl = document.createElement('option');
            optCtrl.value = controller;
            optCtrl.textContent = `Контролирующий (${controller})`;
            receiverSelect.appendChild(optCtrl);

            let optAppr = document.createElement('option');
            optAppr.value = approver;
            optAppr.textContent = `Принимающий (${approver})`;
            receiverSelect.appendChild(optAppr);

            if (requestId) {
                if (optCtrl.value === tr.dataset.receiver) {
                    optCtrl.selected = true;
                } else if (optAppr.value === tr.dataset.receiver) {
                    optAppr.selected = true;
                }
            }
            else {
                optAppr.selected = true;
            }

            if (requestId) {
                document.getElementById('createRequestBtn').style.display = 'none';
                document.getElementById('updateRequestBtn').style.display = 'inline-block';
                document.getElementById('deleteRequestBtn').style.display = 'inline-block';
            } else {
                document.getElementById('createRequestBtn').style.display = 'inline-block';
                document.getElementById('updateRequestBtn').style.display = 'none';
                document.getElementById('deleteRequestBtn').style.display = 'none';
            }

            let modal = new bootstrap.Modal(document.getElementById('requestModal'));
            modal.show();
        }

        function createWorkRequest() {
            let docNumber = $('#hiddenDocNumber').val();
            let requestType = $('#requestTypeSelect').val();
            let proposedDate = $('#proposedDate').val();
            let receiver = $('#receiverSelect').val();
            let note = $('#requestNote').val();
            let sender = '@Model.UserName.ToString()';

            let dateObj = proposedDate ? new Date(proposedDate + "T00:00:00") : null;

            let data = {
                DocumentNumber: docNumber,
                RequestType: requestType,
                Sender: sender,
                Receiver: receiver,
                ProposedDate: dateObj,
                Note: note
            };

            fetch('@Url.Page("Index", "CreateRequest")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })
            .then(r => r.json())
            .then(res => {
                if (res.success) {
                    alert("Заявка отправлена!");
                    let modalEl = document.getElementById('requestModal');
                    let modal = bootstrap.Modal.getInstance(modalEl);
                    modal.hide();

                    let tr = document.querySelector(`tr[data-id="${docNumber}"]`);
                    if (tr) {
                        tr.dataset.requestId = res.requestId;
                        tr.dataset.requestType = requestType;
                        tr.dataset.requestDate = proposedDate;
                        tr.dataset.requestNote = note;
                        tr.dataset.receiver = receiver;

                        tr.classList.remove('table-warning', 'table-info');
                        if (requestType.startsWith('корр'))
                            tr.classList.add('table-warning');
                        else if (requestType === 'факт')
                            tr.classList.add('table-info');
                    }
                } else {
                    alert("Ошибка: " + res.message);
                }
            })
            .catch(e => console.error(e));
        }

        function updateWorkRequest() {
            let requestId = $('#hiddenRequestId').val();
            let docNumber = $('#hiddenDocNumber').val();
            let requestType = $('#requestTypeSelect').val();
            let proposedDate = $('#proposedDate').val();
            let receiver = $('#receiverSelect').val();
            let note = $('#requestNote').val();

            let dateObj = proposedDate ? new Date(proposedDate + "T00:00:00") : null;

            let data = {
                Id: parseInt(requestId),
                DocumentNumber: docNumber,
                RequestType: requestType,
                Receiver: receiver,
                ProposedDate: dateObj,
                Note: note
            };

            fetch('@Url.Page("Index", "UpdateRequest")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })
            .then(r => r.json())
            .then(res => {
                if (res.success) {
                    alert("Заявка обновлена!");
                    let modalEl = document.getElementById('requestModal');
                    let modal = bootstrap.Modal.getInstance(modalEl);
                    modal.hide();

                    let tr = document.querySelector(`tr[data-id="${docNumber}"]`);
                    if (tr) {
                        tr.dataset.requestType = requestType;
                        tr.dataset.requestDate = proposedDate;
                        tr.dataset.requestNote = note;
                        tr.dataset.receiver = receiver;

                        tr.classList.remove('table-warning', 'table-info');
                        if (requestType.startsWith('корр'))
                            tr.classList.add('table-warning');
                        else if (requestType === 'факт')
                            tr.classList.add('table-info');
                    }
                } else {
                    alert("Ошибка: " + res.message);
                }
            })
            .catch(e => console.error(e));
        }

        function deleteWorkRequest() {
            let requestId = $('#hiddenRequestId').val();
            let docNumber = $('#hiddenDocNumber').val();

            let data = {
                RequestId: parseInt(requestId),
                DocumentNumber: docNumber
            };

            fetch('@Url.Page("Index", "DeleteRequest")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })
            .then(r => r.json())
            .then(res => {
                if (res.success) {
                    alert("Заявка удалена!");
                    let modalEl = document.getElementById('requestModal');
                    let modal = bootstrap.Modal.getInstance(modalEl);
                    modal.hide();

                    let tr = document.querySelector(`tr[data-id="${docNumber}"]`);
                    if (tr) {
                        delete tr.dataset.requestId;
                        delete tr.dataset.requestType;
                        delete tr.dataset.requestDate;
                        delete tr.dataset.requestNote;
                        delete tr.dataset.receiver;
                        tr.classList.remove('table-warning', 'table-info');
                    }
                } else {
                    alert("Ошибка: " + res.message);
                }
            })
            .catch(e => console.error(e));
        }

        function refreshCache() {
            let btn = document.getElementById('refreshCacheBtn');
            let originalText = btn.innerHTML;

            btn.disabled = true;
            btn.innerHTML = "Обновляю...";

            fetch('@Url.Page("Index", "RefreshCache")', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(res => {
                if (res.success) {
                    let countdown = 5;
                    let timerId = setInterval(() => {
                        countdown--;
                        btn.innerHTML = `Ожидайте ${countdown}c`;
                        if (countdown <= 0) {
                            clearInterval(timerId);
                            location.reload();
                        }
                    }, 1000);
                } else {
                    alert("Ошибка при очистке кэша: " + res.message);
                    btn.innerHTML = originalText;
                    btn.disabled = false;
                }
            })
            .catch(error => {
                console.error(error);
                alert("Ошибка сети при обновлении кэша");
                btn.innerHTML = originalText;
                btn.disabled = false;
            });
        }

        function setFormat(fmt) {
            const spinner = document.querySelector('#generatePdfBtn .spinner-border');
            spinner.style.display = 'inline-block';
            document.getElementById('formatInput').value = fmt;

            setTimeout(() => {
                spinner.style.display = 'none';
            }, 3000);

            document.getElementById('exportForm').submit();
        }
    </script>
}