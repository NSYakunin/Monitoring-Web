@page
@using Monitoring.UI.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model IndexModel
@{
    ViewData["Title"] = "Главная страница";
    Layout = "_Layout.cshtml";
}

<!-- Подключение необходимых стилей (можно в _Layout.cshtml) -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<!-- jQuery UI (CSS для sortable и прочего) -->
<link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/smoothness/jquery-ui.css" />

<div class="container-fluid mt-4">
    <!-- Шапка: подразделение, пользователь, фильтры -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex flex-wrap align-items-center justify-content-between bg-light p-3 rounded">
                <div>
                    <h5 class="mb-0">Подразделение: @Model.DepartmentName</h5>
                    <p class="text-muted mb-0">Текущий пользователь: @Model.UserName</p>
                </div>

                <!-- Форма с фильтрами -->
                <form method="get" id="filterForm" class="d-flex flex-wrap align-items-end gap-2">
                    <!-- Фильтр по датам -->
                    <div class="d-flex flex-column">
                        <label for="startDate" class="form-label">C даты:</label>
                        <input type="date" class="form-control" id="startDate" name="StartDate" 
                               value="@(Model.StartDate?.ToString("yyyy-MM-dd") ?? "")" />
                    </div>
                    <div class="d-flex flex-column">
                        <label for="endDate" class="form-label">По дату:</label>
                        <input type="date" class="form-control" id="endDate" name="EndDate" 
                               value="@(Model.EndDate?.ToString("yyyy-MM-dd") ?? "")" />
                    </div>

                    <!-- Выпадающий список для выбора исполнителя -->
                    <div class="d-flex flex-column">
                        <label for="executor" class="form-label">Исполнитель:</label>
                        <select id="executor" name="executor" class="form-select">
                            <option value="">Все исполнители</option>
                            @foreach (var item in Model.Executors)
                            {
                                    <option value="@item"
                                            selected="@(item == Model.Executor ? "selected" : null)">
                                    @item
                                    </option>
                            }
                        </select>
                    </div>

                    <!-- Поле поиска -->
                    <div class="d-flex flex-column">
                        <label for="search" class="form-label">Поиск:</label>
                        <input type="text" class="form-control" id="search" name="search" 
                               placeholder="Поиск..." value="@Model.SearchQuery" />
                    </div>

                    <div class="d-flex justify-content-end gap-3 mb-4">
                        <!-- Кнопка выхода -->
                        <a asp-page="./Index" asp-page-handler="Logout"
                           class="btn btn-logout">
                            Выход
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Форма для генерации PDF (метод POST). Храним скрытые поля для передачи фильтров -->
    <form method="post" class="position-relative">
        <input type="hidden" asp-for="StartDate" />
        <input type="hidden" asp-for="EndDate" />
        <input type="hidden" asp-for="Executor" />
        <input type="hidden" asp-for="SearchQuery" />
        <input type="hidden" name="SelectedItemsOrder" id="SelectedItemsOrder" />

        <div class="d-flex justify-content-end gap-3 mb-4">
            <!-- Кнопка генерации PDF -->
            <button type="submit" class="btn btn-pdf" id="generatePdfBtn">
                <span class="spinner-border spinner-border-sm me-2"
                      role="status" aria-hidden="true" style="display:none;"></span>
                Сгенерировать PDF
            </button>
        </div>
    </form>

    <!-- Контейнер для таблицы работ (Partial view) -->
    <div class="row mb-4">
        <div class="col-12">
            <div id="workItemsTableContainer">
                @await Html.PartialAsync("_WorkItemsTablePartial", Model)
            </div>
        </div>
    </div>
</div>

@section Scripts {
        <!-- Скрипты: jQuery, Bootstrap, Handsontable, jQuery UI -->
        <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
        <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>

        <!-- Дополнительные стили (вынести в .css-файл) -->
        <style>
            /* Пример ограничений для Handsontable, если используется */
            #spreadsheet {
                width: 100%;
                height: 80vh;
                overflow: auto;
                max-width: 100%;
            }
            .handsontable th,
            .handsontable td {
                min-width: 50px;
                max-width: 300px;
            }
            .handsontable {
                box-sizing: border-box;
            }
            .handsontable colHeader {
                position: sticky;
                top: 0;
                background-color: #f8f9fa;
                z-index: 1;
            }

            /* Подсветка выбранной (чекбоксом) строки */
            .selected-row {
                background-color: #e9f7ef !important; /* Светло-зеленый фон */
            }

            /* Иконка/элемент для "таскания" строк */
            .drag-handle {
                cursor: move;
                margin-left: 5px;
                opacity: 0.7;
                transition: opacity 0.2s;
            }
            .drag-handle:hover {
                opacity: 1;
            }

            /* Кнопка "Выделить/снять все" */
            .toggle-all-btn {
                cursor: pointer;
                margin-left: 8px;
                opacity: 0.7;
                transition: all 0.3s;
            }
            .toggle-all-btn:hover {
                opacity: 1;
                transform: scale(1.2);
            }

        .btn-pdf {
            background: linear-gradient(145deg, #2c3e50, #34495e);
            color: white !important;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            position: relative;
            overflow: hidden;
        }

            .btn-pdf:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 12px rgba(0,0,0,0.2);
                background: linear-gradient(145deg, #34495e, #2c3e50);
            }

            .btn-pdf:active {
                transform: translateY(1px);
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }

        .btn-logout {
            border: 2px solid #dc3545;
            color: #dc3545;
            background: transparent;
            padding: 5px 10px;
            border-radius: 8px;
            transition: all 0.4s ease;
            position: relative;
        }

            .btn-logout:hover {
                background: rgba(220, 53, 69, 0.9);
                color: white !important;
                border-color: transparent;
                box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
            }

        .spinner-border {
            vertical-align: text-top;
        }
        </style>

        <script>
            // Функция для инициализации сортировки строк и чекбоксов.
            // Вызывается и при первом рендере, и после AJAX-перезагрузки partial.
            function initSortableTable() {
                var $tableBody = $("#workItemsTable tbody");

                // Делаем строки таблицы сортируемыми
                $tableBody.sortable({
                    handle: ".drag-handle",  // "тащим" за элемент с этим классом
                    axis: "y",               // только вертикально
                    cursor: "move",
                    start: function(event, ui) {
                        // При начале перетаскивания отмечаем чекбокс и добавляем стиль
                        ui.item.find('.row-select').prop('checked', true);
                        ui.item.addClass('selected-row');
                    },
                    update: function(event, ui) {
                        console.log('Порядок изменен');
                    }
                });
                $tableBody.disableSelection();  // отключаем выделение текста при перетаскивании

                // Обработчик изменения одного чекбокса (выделение/снятие выделения)
                $('#workItemsTable').on('change', '.row-select', function() {
                    $(this).closest('tr').toggleClass('selected-row', this.checked);
                });

                // При загрузке: выделим строки, у которых уже отмечен чекбокс
                $('#workItemsTable .row-select:checked')
                    .closest('tr')
                    .addClass('selected-row');

                // Обработчик "Выделить/снять все"
                $('.toggle-all-btn').off('click').on('click', function() {
                    let all = $('#workItemsTable .row-select');
                    // Проверяем, есть ли хоть один неотмеченный
                    let anyUnchecked = all.filter(':not(:checked)').length > 0;
                    // Если есть неотмеченные – ставим всем checked; иначе снимаем
                    all.prop('checked', anyUnchecked).trigger('change');
                });
            }

            $(document).ready(function(){
                // Инициализируем сортировку и обработчики при первой загрузке
                initSortableTable();

                // При изменении полей фильтра вызываем AJAX
                $('#startDate, #endDate, #executor, #search').on('change keyup', function(e) {
                    $.ajax({
                        url: '@Url.Page("Index", "Filter")', // вызов OnGetFilterAsync
                        type: 'GET',
                        data: {
                            startDate: $('#startDate').val(),
                            endDate:   $('#endDate').val(),
                            executor:  $('#executor').val(),
                            searchQuery: $('#search').val()
                        },
                        success: function(result) {
                            // Обновляем только контейнер с таблицей
                            $('#workItemsTableContainer').html(result);

                            // Повторно инициализируем sortable/чекбоксы для вновь загруженной таблицы
                            initSortableTable();

                            // Подставляем новые значения в скрытые поля, чтобы они ушли при POST
                            $('input[name="StartDate"]').val($('#startDate').val());
                            $('input[name="EndDate"]').val($('#endDate').val());
                            $('input[name="Executor"]').val($('#executor').val());
                            $('input[name="SearchQuery"]').val($('#search').val());
                        }
                    });
                });

                // Кнопка "Сгенерировать PDF"
                document.getElementById("generatePdfBtn").addEventListener("click", function(e) {
                    // Собираем id выбранных строк
                    let rows = document.querySelectorAll("#workItemsTable tbody tr");
                    let result = [];

                    rows.forEach((row) => {
                        let checkbox = row.querySelector("input.row-select");
                        let isChecked = checkbox && checkbox.checked;
                        let itemId = row.getAttribute("data-id") || "";
                        if (isChecked) {
                            result.push(itemId);
                        }
                    });

                    // Преобразуем в JSON и сохраняем в скрытое поле
                    let jsonString = JSON.stringify(result);
                    document.getElementById("SelectedItemsOrder").value = jsonString;
                    // Далее форма сабмитится как обычно (POST -> OnPostAsync)
                });
            });
        </script>
}