@page
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model web_test.Pages.IndexModel
@{
    ViewData["Title"] = "Главная страница";
    Layout = "_Layout.cshtml";
}
<!-- Подключаем стили для Handsontable (редактора) и Bootstrap (модальное окно) -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

<div class="container-fluid mt-4">
    <!-- Шапка: подразделение, пользователь, фильтры -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex flex-wrap align-items-center justify-content-between bg-light p-3 rounded">
                <div>
                    <h5 class="mb-0">Подразделение: @Model.DepartmentName</h5>
                    <p class="text-muted mb-0">Текущий пользователь: @Model.UserName</p>
                </div>
                <!-- Форма с фильтрами -->
                <form method="get" id="filterForm" class="d-flex flex-wrap align-items-end gap-2">
                    <!-- Фильтр по датам -->
                    <div class="d-flex flex-column">
                        <label for="startDate" class="form-label">C даты:</label>
                        <input type="date" class="form-control" id="startDate" name="StartDate" value="@(Model.StartDate.HasValue ? Model.StartDate.Value.ToString("yyyy-MM-dd") : "")" />
                    </div>
                    <div class="d-flex flex-column">
                        <label for="endDate" class="form-label">По дату:</label>
                        <input type="date" class="form-control" id="endDate" name="EndDate" value="@(Model.EndDate.HasValue ? Model.EndDate.Value.ToString("yyyy-MM-dd") : "")" />
                    </div>
                    <!-- Выпадающий список для выбора исполнителя -->
                    <div class="d-flex flex-column">
                        <label for="executor" class="form-label">Исполнитель:</label>
                        <select id="executor" name="executor" class="form-select">
                            <option value="">Все исполнители</option>
                            @foreach (var item in Model.Executors)
                            {
                                <option value="@item.Value" @@(item.Value == Model.executor ? "selected" : "")>@item.Text</option>
                            }
                        </select>
                    </div>
                    <!-- Поле поиска -->
                    <div class="d-flex flex-column">
                        <label for="SearchQuery" class="form-label">Поиск:</label>
                        <input type="text" class="form-control" id="SearchQuery" name="SearchQuery" placeholder="Поиск..." value="@(Model.SearchQuery)" />
                    </div>
                    <!-- Кнопка для применения фильтров -->
                    <button type="submit" class="btn btn-primary">Применить</button>
                    <!-- Кнопка для выхода -->
                    <a asp-page="./Index" asp-page-handler="Logout" class="btn btn-outline-danger">Выход</a>
                </form>
            </div>
        </div>
    </div>

    <!-- Таблица работ (Partial view) -->
    <div class="row mb-4">
        <div class="col-12">
            <div id="workItemsTableContainer">
                @await Html.PartialAsync("_WorkItemsTablePartial", Model)
            </div>
        </div>
    </div>

    <!-- Кнопки внизу страницы -->
    <div class="row mb-4">
        <div class="col-12 d-flex gap-3">
            <button type="button" class="btn btn-success" id="openEditorBtn">
                Сформировать сдаточный чек
            </button>
            <button type="button" class="btn btn-secondary" id="refreshBtn">
                Обновить
            </button>
        </div>
    </div>
</div>

<!-- Модальное окно для редактора (Handsontable) -->
<div class="modal fade" id="editorModal" tabindex="-1" aria-labelledby="editorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen">
        <!-- Используем modal-fullscreen для максимальной ширины -->
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title" id="editorModalLabel">Редактор сдаточного чека</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
            </div>
            <div class="modal-body">
                <!-- Контейнер для Handsontable -->
                <div id="spreadsheet" style="width: 100%; height: 80vh;"></div> <!-- Увеличиваем высоту -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="exportPdfBtn">Экспорт в PDF</button> <!-- Новая кнопка -->
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
            </div>
        </div>
    </div>
</div>

<!-- Скрипты: jQuery, Bootstrap, Handsontable -->
<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>

@section Scripts {

    <style>
        /* Ограничиваем ширину таблицы и добавляем горизонтальную прокрутку */
        #spreadsheet {
            width: 100%;
            height: 80vh; /* 80% от высоты окна */
            overflow: auto;
            max-width: 100%;
        }

        /* Устанавливаем минимальную ширину для столбцов */
        .handsontable th,
        .handsontable td {
            min-width: 50px; /* Минимальная ширина столбца */
            max-width: 300px; /* Максимальная ширина столбца */
        }

        /* Убираем лишние отступы и padding */
        .handsontable {
            box-sizing: border-box;
        }

        /* Делаем заголовки столбцов фиксированными */
        .handsontable colHeader {
            position: sticky;
            top: 0;
            background-color: #f8f9fa; /* Цвет фона заголовков */
            z-index: 1;
        }

            /* Добавляем в секцию стилей */
            .handsontable td {
                font-size: 14px !important;
                padding: 8px !important;
            }

            .handsontable th {
                font-size: 16px !important;
                font-weight: bold !important;
                background-color: #f8f9fa !important;
            }
    </style>


<script>
$(document).ready(function(){
                // Обработчики изменений фильтров
            $('#filterForm').on('change keyup', 'input, select', function(e) {
                // Таймер для задержки запроса при печати
                clearTimeout(window.filterTimeout);
                window.filterTimeout = setTimeout(() => {
                    submitFilters();
                }, 300);
            });

        // Обновленный обработчик формы
        $('#filterForm').on('submit', function(e) {
            e.preventDefault();
            submitFilters();
        });

        // Обновленная функция фильтрации
        function submitFilters() {
            const formData = $('#filterForm').serialize();

            $.ajax({
                url: '@Url.Page("Index")',
                type: 'GET',
                data: formData,
                success: function(result) {
                    $('#workItemsTableContainer').html(
                        $(result).find('#workItemsTableContainer').html()
                    );
                    // Обновляем данные для редактора
                    updateEditorData();
                }
            });
        }

        // Обновление данных в редакторе
        function updateEditorData() {
            if (hot) {
                hot.loadData(@Html.Raw(Json.Serialize(Model.WorkItems)));
            }
        }

    // Инициализация модального окна и Handsontable
    var hot;
    var editorModal = new bootstrap.Modal(document.getElementById('editorModal'), {
        keyboard: false
    });

    $('#openEditorBtn').click(function(){
        // Открываем модальное окно
        editorModal.show();
        // Инициализируем Handsontable один раз
        if (!hot) {
            var container = document.getElementById('spreadsheet');
            // Пример данных, которые можно редактировать – здесь можно сформировать содержимое чека
            var data = @Html.Raw(Json.Serialize(Model.WorkItems.Select(item => new object[] {
                    item.DocumentNumber,
                    item.DocumentName,
                    item.WorkName,
                    item.Executor,
                    item.Controller,
                    item.Approver,
                    item.PlanDate?.ToString("dd.MM.yyyy"),
                    item.Korrect1?.ToString("dd.MM.yyyy"),
                    item.Korrect2?.ToString("dd.MM.yyyy"),
                    item.Korrect3?.ToString("dd.MM.yyyy"),
                    item.FactDate?.ToString("dd.MM.yyyy")
                    }).ToList()));
            hot = new Handsontable(container, {
                data: data,
                rowHeaders: true,
                colHeaders: [
                        '№', 'Наименование документа', 'Наименование работы', 'Исполнители',
                        'Контролирующий', 'Принимающий', 'План', 'Корр1', 'Корр2', 'Корр3', 'Факт'
                    ],
                contextMenu: true,
                stretchH: 'all',
                manualColumnResize: true, // Включаем возможность изменения ширины столбцов
                autoColumnSize: { // Автоматически подбираем ширину столбцов
                    samplingRatio: 23
                },
                width: '100%', // Ширина таблицы
                //height: '900px', // Высота таблицы
                colWidths: [60, 250, 200, 60, 60, 60, 60, 60, 60, 60, 60], // Пример настройки ширины столбцов
                licenseKey: 'non-commercial-and-evaluation'
            });

        }
    });

        $('#exportPdfBtn').click(async function(){
            const spreadsheet = document.getElementById('spreadsheet');
            const originalStyles = {
                height: spreadsheet.style.height,
                overflow: spreadsheet.style.overflow,
                position: spreadsheet.style.position
            };

            // Временные стили для полного рендеринга
            spreadsheet.style.height = 'auto';
            spreadsheet.style.overflow = 'visible';
            spreadsheet.style.position = 'static';

            // Задержка для применения стилей
            await new Promise(resolve => setTimeout(resolve, 500));

            html2canvas(spreadsheet, {
                scrollY: -window.scrollY,
                scrollX: -window.scrollX,
                windowHeight: spreadsheet.scrollHeight,
                windowWidth: spreadsheet.scrollWidth
            }).then(canvas => {
                const imgData = canvas.toDataURL('image/png');
                const pdf = new jspdf.jsPDF({
                    orientation: 'landscape',
                    unit: 'mm',
                    format: 'a4'
                });

                // Шапка документа
                pdf.setFontSize(18);
                pdf.text('Сдаточный чек', 105, 15, { align: 'center' });
                pdf.setFontSize(12);
                pdf.text(`Дата формирования: ${new Date().toLocaleDateString()}`, 105, 25, { align: 'center' });
                pdf.text(`Подразделение: ${@Json.Serialize(Model.DepartmentName)}`, 105, 30, { align: 'center' });

                // Размеры изображения
                const imgWidth = 297;
                const pageHeight = 210;
                const imgHeight = (canvas.height * imgWidth) / canvas.width;

                // Добавление изображения с отступами
                pdf.addImage(imgData, 'PNG', 10, 40, imgWidth-20, imgHeight-20);

                // Восстановление стилей
                Object.assign(spreadsheet.style, originalStyles);

                pdf.save("sdatocny_chek.pdf");
            });
        });
});
</script>

}